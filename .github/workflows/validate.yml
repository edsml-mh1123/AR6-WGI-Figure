name: Repository Validation

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

# on:
#   push:  # Trigger validation on push to any branch
#   pull_request:  # Trigger validation on pull requests
#   workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pull-requests: write  # enable write permissions for pull request comments

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      ## ---------------------------
      ## Step 1: Repo Name Validation
      ## ---------------------------
      - name: Validate repository name format
        id: regex-match
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.event.repository.name }}
          regex: '^ar7-(\w+)-(\w+)-(\w+)-(\w+)$'

      - name: Create JSON file with repo name components
        if: steps.regex-match.outputs.match != ''
        run: |
          echo '{
            "report": "${{ steps.regex-match.outputs.group1 }}",
            "draft": "${{ steps.regex-match.outputs.group2 }}",
            "chapter": "${{ steps.regex-match.outputs.group3 }}",
            "figure": "${{ steps.regex-match.outputs.group4 }}"
          }' > repo_name.json

      - name: Validate repository name schema
        id: validate-repo-name
        if: steps.regex-match.outputs.match != ''
        uses: GrantBirki/json-yaml-validate@v3.2.1
        with:
          comment: "true"
          files: "repo_name.json"
          json_schema: .schema/repo_name.json

      - name: Fail if repository name is invalid
        if: steps.regex-match.outputs.match == ''
        run: |
          echo "Repository name does not match the required format: AR6-<report>-<draft>-<chapter>-<figure>"
          exit 1

      ## ---------------------------
      ## Step 2: Mandatory Files Checks
      ## ---------------------------
      - name: Check mandatory files existence
        uses: andstor/file-existence-action@v3
        with:
          files: "LICENSE, README.md, CITATION.cff, figure/*.png"
          fail: "true"

      ## ---------------------------
      ## Step 3: Schema Validation
      ## ---------------------------
      # - name: Validate figure.yml against Zenodo schema
      #   id: validate-figure-yml
      #   uses: GrantBirki/json-yaml-validate@v3.2.1
      #   with:
      #     comment: "true"
      #     files: "figure.yml"
      #     yaml_as_json: "true"
      #     json_schema: .schema/zenodo_v0.3.0.json
      #     ajv_strict_mode: "false"

      - name: Validate .zenodo.json file format
        id: validate-zenodo-json
        run: |
          if jq empty .zenodo.json; then
            echo ".zenodo.json is valid JSON"
            echo "valid_json=true" >> $GITHUB_OUTPUT
          else
            echo ".zenodo.json is not valid JSON"
            echo "valid_json=false" >> $GITHUB_OUTPUT
            echo "::error file=.zenodo.json::JSON validation failed. Please ensure .zenodo.json is correctly formatted."
            exit 1
          fi

      - name: Validate .zenodo.json against schema
        if: success()
        uses: GrantBirki/json-yaml-validate@v3.2.1
        with:
          comment: "true"
          files: ".zenodo.json"
          json_schema: .schema/zenodo_v0.3.0.json
          ajv_strict_mode: "false"

      - name: Check for required fields in .zenodo.json
        if: success()
        run: |
          required_fields=("title" "creators" "description" "license" "upload_type")
          for field in "${required_fields[@]}"; do
            if ! jq -e ".$field" .zenodo.json > /dev/null; then
              echo "Required field '$field' is missing in .zenodo.json"
              echo "::error file=.zenodo.json::Missing required field: $field"
              exit 1
            fi
          done
          
          # Validate creators array has at least one entry with name
          if ! jq -e '.creators | length > 0' .zenodo.json > /dev/null; then
            echo "At least one creator must be specified in .zenodo.json"
            echo "::error file=.zenodo.json::At least one creator must be specified"
            exit 1
          fi
          
          for i in $(jq -r '.creators | keys | .[]' .zenodo.json); do
            if ! jq -e ".creators[$i].name" .zenodo.json > /dev/null; then
              echo "Creator at index $i is missing required 'name' field"
              echo "::error file=.zenodo.json::Creator at index $i is missing required 'name' field"
              exit 1
            fi
          done
          
          echo "All required fields are present in .zenodo.json"
          echo "fields_valid=true" >> $GITHUB_OUTPUT

      ## ---------------------------
      ## Step 4: Code Folder Validation
      ## ---------------------------
      - name: Check if the 'code' folder exists
        run: |
          if [ ! -d "code" ]; then
            echo "Error: 'code' folder is missing!" | tee -a validation_results.txt
            exit 1
          fi

      - name: Check if 'code' folder contains files
        run: |
          if [ -z "$(ls -A code)" ]; then
            echo "Error: 'code' folder is empty!" | tee -a validation_results.txt
            exit 1
          fi

      ## ---------------------------
      ## Step 5: Upload Validation Report
      ## ---------------------------
      - name: Generate validation summary
        run: echo "All validation checks passed!" > validation_results.txt

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: validation_results
          path: validation_results.txt

      ## ---------------------------
      ## Step 6: Provide User Feedback in PR Comments
      ## ---------------------------
      - name: Add PR comment on validation results
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            **Validation Check Summary**
            
            - **Repo Name Validation:** ${{ steps.validate-repo-name.outcome }}
            - **Mandatory Files Check:** Passed
            - **Schema Validation:** ${{ steps.validate-zenodo-json.outcome == 'success' && 'Passed' || 'Failed' }}
            - **Code Folder Check:** Passed
            
            If there are errors above, **please fix them before merging!**
      