name: Publish to Zenodo

on:
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the 'main' branch
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  publish:
    runs-on: ubuntu-latest  # The job will run on the latest Ubuntu environment

    steps:
      # Step 1: Checkout the contents of the repository
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4  # This step checks out the repository so the workflow can access it

      # Step 2: Check if a concept ID already exists in the repository
      - name: Check if concept exists
        id: concept_check
        run: |
          # Check if 'concept_id.txt' exists. If it does, output the concept ID.
          if [[ -f "concept_id.txt" ]]; then
            echo "Concept ID found: $(cat concept_id.txt)"
            echo "::set-output name=concept_id::$(cat concept_id.txt)"
          else
            # If no concept_id.txt, output an empty value
            echo "::set-output name=concept_id::"
          fi

      # Step 3: Create a new Zenodo concept if no existing concept ID is found
      - name: Create a new concept and store its ID
        id: zenodo_concept
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          # Fetch existing depositions
          RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          
          if [[ $? -ne 0 ]]; then
            echo "Error fetching depositions from Zenodo."
            exit 1
          fi
          
          echo "Zenodo API Response: $RESPONSE"
          
          # Extract an existing concept ID if available
          CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.prereserve_doi != null) | .conceptdoi' | head -n 1)
          
          if [[ -z "$CONCEPT_ID" || "$CONCEPT_ID" == "null" ]]; then
            echo "No existing concept found. Creating a new one."
            
            # Create a new concept using .zenodo.json
            CREATE_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d @.zenodo.json)
            
            if [[ $? -ne 0 ]]; then
              echo "Error creating new concept."
              exit 1
            fi
            
            echo "Create Response: $CREATE_RESPONSE"
            CONCEPT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.conceptdoi')
            
            if [[ -z "$CONCEPT_ID" || "$CONCEPT_ID" == "null" ]]; then
              echo "Error: Concept DOI not returned. Check the API response."
              exit 1
            fi
            
            echo "Created new concept with ID: $CONCEPT_ID"
          else
            echo "Using existing concept with ID: $CONCEPT_ID"
          fi
          
          # Store the concept ID in environment variables, outputs, and a file
          echo "CONCEPT_ID=$CONCEPT_ID" >> $GITHUB_ENV
          echo "concept_id=$CONCEPT_ID" >> $GITHUB_OUTPUT
          echo "$CONCEPT_ID" > concept_id.txt
      

      # Step 4: Create a draft snapshot of the repository contents
      - name: Create a draft snapshot of your repository contents as a new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for authorization
          ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}  # Zenodo sandbox token for API access
        uses: zenodraft/action@0.13.3  # Use the Zenodo draft action to create a new draft version
        with:
          concept: ${{ steps.concept_check.outputs.concept_id }}  # Use the existing concept ID
          metadata: .zenodo.json  # Path to the metadata file for the deposit
          publish: false  # Do not publish immediately, just create a draft
          sandbox: true  # Use the Zenodo sandbox environment for testing
          filenames: code  # Only upload the 'code' folder in the repository
