name: Publish to Zenodo

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:


jobs:
  publish-fig:
    runs-on: ubuntu-latest
    name: Publish code to Zenodo
    steps:
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4

      - name: Create ZIP of code folder
        run: zip -r code.zip code/

      - name: Get or create Zenodo concept and deposition
        id: zenodo_deposition
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          # Ensure access token is set
          if [ -z "$ZENODO_ACCESS_TOKEN" ]; then
            echo "Error: ZENODO_ACCESS_TOKEN is not set."
            exit 1
          fi
      
          echo "Token length: ${#ZENODO_ACCESS_TOKEN}"
      
          # Step 1: Check if there is an existing concept
          RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/records" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
      
          if [[ $? -ne 0 || -z "$RESPONSE" ]]; then
            echo "Error fetching concept list from Zenodo."
            exit 1
          fi
      
          echo "Zenodo API Response: $RESPONSE"
      
          # Step 2: Validate JSON response format
          if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
            echo "Error: Invalid JSON response from Zenodo API."
            exit 1
          fi
      
          # Step 3: Check if an existing concept is found
          EXISTING_CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.hits.hits[0]._source.conceptdoi // empty')
      
          if [ -n "$EXISTING_CONCEPT_ID" ]; then
            # If a concept exists, use it and create a new deposition
            echo "Found existing concept with DOI: $EXISTING_CONCEPT_ID"
            CONCEPT_ID=$EXISTING_CONCEPT_ID
          else
            # If no concept exists, create a new concept and deposition
            echo "No existing concept found. Creating a new concept..."
            CONCEPT_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/records" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
              --data '{"metadata": {"title": "New Concept"}}')
      
            if [[ $? -ne 0 || -z "$CONCEPT_RESPONSE" ]]; then
              echo "Error creating new concept."
              exit 1
            fi
      
            CONCEPT_ID=$(echo "$CONCEPT_RESPONSE" | jq -r '.conceptdoi // empty')
            if [ -z "$CONCEPT_ID" ]; then
              echo "Error: Failed to retrieve new concept DOI."
              exit 1
            fi
      
            echo "Created new concept with DOI: $CONCEPT_ID"
          fi
      
          # Step 4: Create a new deposition for the existing or new concept
          echo "Creating a new deposition for concept DOI: $CONCEPT_ID..."
      
          DEPOSITION_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            --data "{\"metadata\": {\"conceptdoi\": \"$CONCEPT_ID\"}}")
      
          if [[ $? -ne 0 || -z "$DEPOSITION_RESPONSE" ]]; then
            echo "Error creating new deposition."
            exit 1
          fi
      
          # Step 5: Extract the new deposition ID
          DEPOSITION_ID=$(echo "$DEPOSITION_RESPONSE" | jq -r '.id // empty')
          if [ -z "$DEPOSITION_ID" ]; then
            echo "Error: Failed to retrieve new Deposition ID."
            exit 1
          fi
      
          echo "Created new deposition with ID: $DEPOSITION_ID"
      
          # Step 6: Set the concept and deposition ID as GitHub environment variables for subsequent steps
          echo "CONCEPT_ID=$CONCEPT_ID" >> $GITHUB_ENV
          echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV
      
      - name: Upload the ZIP file to Zenodo
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          if [ ! -f "code.zip" ]; then
            echo "Error: code.zip file does not exist!"
            exit 1
          fi
          curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -F "file=@code.zip;filename=code.zip"
  
      - name: Keep in Draft Mode
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/submit" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          if [[ $? -ne 0 ]]; then
            echo "Error keeping deposition in draft mode."
            exit 1
          fi
          echo "Submission completed, kept in draft mode (not published)."

      # - name: Publish the Zenodo deposition
      #   if: success()
      #   env:
      #     ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #   run: |
      #     RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/publish" \
      #       -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
      #     if [[ $? -ne 0 ]]; then
      #       echo "Error publishing the deposition."
      #       exit 1
      #     fi
      #     echo "Deposition published successfully."
