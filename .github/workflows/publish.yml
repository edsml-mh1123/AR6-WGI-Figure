name: Publish to Zenodo

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  publish-fig:
    runs-on: ubuntu-latest
    name: Publish code to Zenodo
    steps:
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4

      - name: Create ZIP of code folder
        run: zip -r code.zip code/

      - name: Debug `.zenodo.json` existence
        run: |
          if [ ! -f ".zenodo.json" ]; then
            echo "Error: .zenodo.json does not exist!"
            exit 1
          else
            echo "Contents of .zenodo.json:"
            cat .zenodo.json
          fi
        
      - name: Get or create Zenodo deposition
        id: zenodo_deposition
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          # Define storage file for IDs
          ID_STORAGE_FILE=".zenodo_ids.json"
          
          # Check if we have stored IDs from previous runs
          if [ -f "$ID_STORAGE_FILE" ]; then
            echo "Found existing Zenodo IDs file"
            STORED_CONCEPT_ID=$(jq -r '.concept_id // empty' "$ID_STORAGE_FILE")
            STORED_DEPOSITION_ID=$(jq -r '.deposition_id // empty' "$ID_STORAGE_FILE")
            
            if [ -n "$STORED_CONCEPT_ID" ] && [ -n "$STORED_DEPOSITION_ID" ]; then
              echo "Using stored IDs: Concept ID=$STORED_CONCEPT_ID, Deposition ID=$STORED_DEPOSITION_ID"
              echo "CONCEPT_ID=$STORED_CONCEPT_ID" >> $GITHUB_ENV
              echo "DEPOSITION_ID=$STORED_DEPOSITION_ID" >> $GITHUB_ENV
              exit 0
            fi
          fi
          
          # If we don't have stored IDs, query Zenodo API
          echo "Fetching depositions from Zenodo..."
          RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          
          if [[ $? -ne 0 ]]; then
            echo "Error fetching deposition list from Zenodo."
            exit 1
          fi
          
          # Extract concept ID and deposition ID from the response
          CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.prereserve_doi != null) | .conceptrecid' | head -n 1)
          DEPOSITION_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.prereserve_doi != null) | .id' | head -n 1)
          
          echo "Retrieved from API: Concept ID=$CONCEPT_ID, Deposition ID=$DEPOSITION_ID"
          
          # If no existing deposition found, create a new one
          if [ -z "$CONCEPT_ID" ] || [ -z "$DEPOSITION_ID" ]; then
            echo "No existing deposition found. Creating new deposition..."
            
            # Ensure .zenodo.json exists
            if [ ! -f ".zenodo.json" ]; then
              echo "Error: .zenodo.json file not found."
              exit 1
            fi
            
            # Create new deposition
            CREATE_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
              -d @.zenodo.json)
            
            if [[ $? -ne 0 ]]; then
              echo "Error creating new deposition."
              echo "Response: $CREATE_RESPONSE"
              exit 1
            fi
            
            # Extract IDs from the creation response
            DEPOSITION_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id')
            CONCEPT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.conceptrecid')
            
            echo "Created new deposition with ID: $DEPOSITION_ID"
            echo "Concept ID: $CONCEPT_ID"
          else
            echo "Using existing deposition with ID: $DEPOSITION_ID"
          fi
          
          # Store IDs for future use
          echo "{\"concept_id\":\"$CONCEPT_ID\",\"deposition_id\":\"$DEPOSITION_ID\"}" > "$ID_STORAGE_FILE"
          echo "Saved IDs to $ID_STORAGE_FILE for future use"
          
          # Make IDs available to other steps
          echo "CONCEPT_ID=$CONCEPT_ID" >> $GITHUB_ENV
          echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV
    
      # - name: Upload the ZIP file to Zenodo
      #   uses: zenodraft/action@0.13.3
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #   with:
      #     metadata: .zenodo.json
      #     filenames: |
      #       code.zip
      #     sandbox: true
      #     publish: false
      #     verbose: true

      - name: Publish the ZIP file to Zenodo
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          # Use the deposition ID from the previous step
          echo "Using deposition ID: $DEPOSITION_ID"
          
          # Check if the file exists
          if [ ! -f "code.zip" ]; then
            echo "Error: code.zip file not found."
            exit 1
          fi
          
          # Create a new version of the deposition
          echo "Creating new version of deposition..."
          NEW_VERSION_RESPONSE=$(curl -s -X POST \
            "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/newversion" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          
          if [[ $? -ne 0 ]]; then
            echo "Error creating new version. Response: $NEW_VERSION_RESPONSE"
            exit 1
          fi
          
          # Extract the new deposition ID from the response
          NEW_DEPOSITION_ID=$(echo "$NEW_VERSION_RESPONSE" | jq -r '.links.latest_draft | split("/").[-1]')
          
          if [ -z "$NEW_DEPOSITION_ID" ] || [ "$NEW_DEPOSITION_ID" == "null" ]; then
            echo "Failed to get new deposition ID. Response: $NEW_VERSION_RESPONSE"
            exit 1
          fi
          
          echo "Created new version with deposition ID: $NEW_DEPOSITION_ID"
          
          # Upload the file to the new deposition
          echo "Uploading code.zip to new deposition $NEW_DEPOSITION_ID..."
          UPLOAD_RESPONSE=$(curl -s -X POST \
            "https://sandbox.zenodo.org/api/deposit/depositions/$NEW_DEPOSITION_ID/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -F "file=@code.zip")
          
          if [[ $? -ne 0 ]]; then
            echo "Error uploading file to Zenodo. Response: $UPLOAD_RESPONSE"
            exit 1
          fi
          
          FILE_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
          
          if [ -z "$FILE_ID" ] || [ "$FILE_ID" == "null" ]; then
            echo "Failed to upload file. Response: $UPLOAD_RESPONSE"
            exit 1
          fi
          
          echo "Successfully uploaded code.zip to new deposition $NEW_DEPOSITION_ID"
          echo "File ID: $FILE_ID"
          
          # Update the DEPOSITION_ID environment variable to the new value
          echo "DEPOSITION_ID=$NEW_DEPOSITION_ID" >> $GITHUB_ENV
          
          # Update the stored IDs file with the new deposition ID
          ID_STORAGE_FILE=".zenodo_ids.json"
          CONCEPT_ID=$(cat "$ID_STORAGE_FILE" | jq -r '.concept_id')
          echo "{\"concept_id\":\"$CONCEPT_ID\",\"deposition_id\":\"$NEW_DEPOSITION_ID\"}" > "$ID_STORAGE_FILE"
          
          # Output the Zenodo URL for the new deposition
          echo "Zenodo deposition URL: https://sandbox.zenodo.org/deposit/$NEW_DEPOSITION_ID"
      
    
