name: Publish to Zenodo

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:


jobs:
  publish-fig:
    runs-on: ubuntu-latest
    name: Publish code to Zenodo
    steps:
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4

      # - name: Set Git User
      #   run: |
      #     echo "GIT_USER_EMAIL=your-email@example.com" >> $GITHUB_ENV
      #     echo "GIT_USER_NAME=Your Name" >> $GITHUB_ENV
      
      # - name: Set up Git authentication
      #   run: |
      #     git config --global user.email "${GIT_USER_EMAIL}"
      #     git config --global user.name "${GIT_USER_NAME}"
      #     git remote set-url origin https://github-actions:${{ secrets.GH_TOKEN }}@github.com/edsml-mh1123/ar7-wg1-fod-ch99-fig99.git

      - name: Create ZIP of code folder
        run: zip -r code.zip code/

      - name: Create deposition (save concept_id or use existing one)
        env:
          ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        id: create_deposition
        run: |
          # Check if .zenodo.json exists and contains a concept_id
          if [ -f ".zenodo.json" ]; then
            concept_id=$(jq -r '.metadata.id[0]' .zenodo.json 2>/dev/null)
          else
            concept_id="null"
          fi
      
          # If no concept_id found, create a new deposition
          if [ "$concept_id" == "null" ] || [ -z "$concept_id" ]; then
            echo "No concept_id found, creating a new deposition."
      
            # Create a new deposition via Zenodo API
            response=$(curl -s -X POST "https://zenodo.org/api/deposit/depositions" \
              -H "Authorization: Bearer $ZENODO_SANDBOX_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              --data-binary @.zenodo.json)
      
            # Check if the API call was successful
            if [ $? -ne 0 ] || [ -z "$(echo "$response" | jq -r '.id')" ]; then
              echo "Error: Failed to create deposition."
              exit 1
            fi
      
            # Extract the concept_id and deposition_id from the response
            concept_id=$(echo "$response" | jq -r '.id')
            deposition_id=$(echo "$response" | jq -r '.conceptrecid')
      
            echo "New concept_id: $concept_id"
            echo "New deposition_id: $deposition_id"
          else
            echo "Using existing concept_id: $concept_id"
          fi
      
        # # with concept_id found, update the existing deposition
        # else
        #   echo "Concept ID already exists, updating deposition."
    
        #   # Update the deposition using the existing concept_id
        #   response=$(curl -s -X PUT "https://zenodo.org/api/deposit/depositions/$concept_id" \
        #     -H "Authorization: Bearer $ZENODO_SANDBOX_ACCESS_TOKEN" \
        #     -F "metadata=@.zenodo.json")
          
        #   # Check if the update was successful
        #   if [ $? -ne 0 ]; then
        #     echo "Error: Failed to update deposition."
        #     exit 1
        #   fi
        #   # Extract the deposition ID from the response
        #   deposition_id=$(echo "$response" | jq -r '.conceptrecid')

        # fi
      
      - name: Upload the ZIP file to Zenodo
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          if [ ! -f "code.zip" ]; then
            echo "Error: code.zip file does not exist!"
            exit 1
          fi
          curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$deposition_id/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -F "file=@code.zip;filename=code.zip"
  
      - name: Keep in Draft Mode
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$deposition_id/actions/submit" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          if [[ $? -ne 0 ]]; then
            echo "Error keeping deposition in draft mode."
            exit 1
          fi
          echo "Submission completed, kept in draft mode (not published)."

      # - name: Publish the Zenodo deposition
      #   if: success()
      #   env:
      #     ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #   run: |
      #     RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$deposition_id/actions/publish" \
      #       -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
      #     if [[ $? -ne 0 ]]; then
      #       echo "Error publishing the deposition."
      #       exit 1
      #     fi
      #     echo "Deposition published successfully."
