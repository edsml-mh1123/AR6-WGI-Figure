name: Publish to Zenodo

on:
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  publish-fig:
    runs-on: ubuntu-latest
    name: Publish code to Zenodo
    steps:
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4

      - name: Create ZIP of code folder
        run: zip -r code.zip code/

      - name: Debug `.zenodo.json` existence
        run: |
          if [ ! -f ".zenodo.json" ]; then
            echo "Error: .zenodo.json does not exist!"
            exit 1
          else
            echo "Contents of .zenodo.json:"
            cat .zenodo.json
          fi
        
      - name: Get or create Zenodo deposition
        id: zenodo_deposition
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          # Define storage file for IDs
          ID_STORAGE_FILE=".zenodo_ids.json"
          
          # Verify token works
          echo "Testing Zenodo API access..."
          TEST_RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          
          if echo "$TEST_RESPONSE" | grep -q "message"; then
            echo "ERROR: API access issue - $(echo $TEST_RESPONSE | jq -r '.message // "Unknown error"')"
            exit 1
          fi
          
          # Create new deposition with inline metadata
          echo "Creating new deposition..."
          CREATE_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -d '{"metadata": {"title": "My Dataset", "upload_type": "dataset", "description": "Description", "creators": [{"name": "Author Name", "affiliation": "Affiliation"}]}}')
          
          # Extract IDs from the creation response
          DEPOSITION_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id')
          CONCEPT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.conceptrecid')
          
          if [ "$DEPOSITION_ID" = "null" ] || [ -z "$DEPOSITION_ID" ]; then
            echo "ERROR: Failed to create deposition"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi
          
          echo "Created new deposition with ID: $DEPOSITION_ID"
          echo "Concept ID: $CONCEPT_ID"
          
          # Store IDs for future use
          echo "{\"concept_id\":\"$CONCEPT_ID\",\"deposition_id\":\"$DEPOSITION_ID\"}" > "$ID_STORAGE_FILE"
          
          # Make IDs available to other steps
          echo "CONCEPT_ID=$CONCEPT_ID" >> $GITHUB_ENV
          echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV
          echo "concept_id=$CONCEPT_ID" >> $GITHUB_OUTPUT
      

      - name: Upload the ZIP file to Zenodo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        uses: zenodraft/action@0.13.3
        with:
          concept: ${{ steps.zenodo_deposition.outputs.concept_id }}
          metadata: .zenodo.json
          publish: true
          sandbox: true
          filenames: |
            code.zip
          verbose: true
