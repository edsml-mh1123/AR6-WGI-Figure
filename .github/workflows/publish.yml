name: Publish to Zenodo

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-fig:
    runs-on: ubuntu-latest
    name: Publish code to Zenodo
    steps:
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4

      - name: Create ZIP of code folder
        run: zip -r code.zip code/

      - name: Get or create Zenodo deposition
        id: zenodo_deposition
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          set -x  # Enable debug mode

          # Fetch existing depositions from Zenodo API
          RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
      
          if [[ $? -ne 0 || -z "$RESPONSE" ]]; then
            echo "Error fetching deposition list from Zenodo."
            exit 1
          fi
      
          echo "Zenodo API Response: $RESPONSE"
      
          # Validate JSON response
          if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
            echo "Error: Invalid JSON response from Zenodo API."
            exit 1
          fi
      
          # Extract Concept ID if it exists
          CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.[0].conceptrecid // empty')
      
          if [ -z "$CONCEPT_ID" ]; then
            echo "No existing deposition found. Creating a new deposition..."
            
            # Create a new deposition
            NEW_DEPOSITION_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{"metadata": {"title": "New Deposition", "upload_type": "dataset"}}')
      
            if [[ $? -ne 0 || -z "$NEW_DEPOSITION_RESPONSE" ]]; then
              echo "Error creating new deposition."
              exit 1
            fi
      
            # Extract the new deposition ID
            DEPOSITION_ID=$(echo "$NEW_DEPOSITION_RESPONSE" | jq -r '.id')
            echo "Created new deposition with ID: $DEPOSITION_ID"
          else
            echo "Found existing Concept ID: $CONCEPT_ID"
            
            # Create a new version of the existing deposition
            NEW_VERSION_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$CONCEPT_ID/actions/newversion" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
            
            # Check if the record has been deleted (status 410)
            STATUS=$(echo "$NEW_VERSION_RESPONSE" | jq -r '.status // empty')
            MESSAGE=$(echo "$NEW_VERSION_RESPONSE" | jq -r '.message // empty')

            if [[ "$STATUS" == "410" ]]; then
              echo "Error: The record with Concept ID $CONCEPT_ID has been deleted. Creating a new deposition instead."
              
              # Create a new deposition since the old one is deleted
              NEW_DEPOSITION_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
                -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                --data '{"metadata": {"title": "New Deposition", "upload_type": "dataset"}}')
      
              if [[ $? -ne 0 || -z "$NEW_DEPOSITION_RESPONSE" ]]; then
                echo "Error creating new deposition."
                exit 1
              fi
      
              DEPOSITION_ID=$(echo "$NEW_DEPOSITION_RESPONSE" | jq -r '.id')
              echo "Created new deposition with ID: $DEPOSITION_ID"
            else
              # Extract the latest draft deposition ID from the response
              DEPOSITION_URL=$(echo "$NEW_VERSION_RESPONSE" | jq -r '.links.latest_draft // empty')
              
              if [ -z "$DEPOSITION_URL" ]; then
                echo "Error: Could not retrieve latest draft URL."
                exit 1
              fi
      
              # Fetch the draft deposition details to get its ID
              DRAFT_RESPONSE=$(curl -s -X GET "$DEPOSITION_URL" \
                -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
      
              DEPOSITION_ID=$(echo "$DRAFT_RESPONSE" | jq -r '.id')
              
              echo "Updated existing deposition with ID: $DEPOSITION_ID"
            fi
          fi
      
          # Export DEPOSITION_ID for next steps
          if [ ! -z "$DEPOSITION_ID" ]; then
            echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV
          else
            echo "Error: DEPOSITION_ID is empty."
            exit 1
          fi

      - name: Upload the ZIP file to Zenodo
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          set -x  # Enable debug mode

          # Validate DEPOSITION_ID
          if [ -z "$DEPOSITION_ID" ]; then
            echo "Error: DEPOSITION_ID is not set or empty!"
            exit 1
          fi

          # Check if code.zip exists
          if [ ! -f "code.zip" ]; then
            echo "Error: code.zip file does not exist!"
            exit 1
          fi

          # Upload file to Zenodo
          RESPONSE=$(curl --fail-with-body -s -X POST \
            "https://sandbox.zenodo.org/api/deposit/depositions/DEPOSITION_ID/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -F "file=@code.zip;filename=code.zip")

          if [[ $? -ne 0 ]]; then
            echo "Error uploading file to Zenodo."
            echo "Response: $RESPONSE"
            exit 1
          fi

          echo "File uploaded successfully!"


      - name: Keep in Draft Mode (Optional)
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          set -x  # Enable debug mode

          RESPONSE=$(curl --fail-with-body -s -X POST \
            "https://sandbox.zenodo.org/api/deposit/depositions/DEPOSITION_ID/actions/submit" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          
          if [[ $? -ne 0 ]]; then
            echo "Error keeping deposition in draft mode."
            exit 1
          fi

      # Uncomment the following step to publish the deposition automatically.
      # This is currently commented out to avoid accidental publication.

      # - name: Publish the Zenodo deposition (Optional)
      #   env:
      #     ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #   run: |
      #     set -x  # Enable debug mode

      #     RESPONSE=$(curl --fail-with-body -s -X POST \
      #       "https://sandbox.zenodo.org/api/deposit/depositions/${{ env.DEPOSITION_ID }}/actions/publish" \
      #       -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          
      #     if [[ $? -ne 0 ]]; then
      #       echo "Error publishing the deposition."
      #       exit 1
      #     fi

