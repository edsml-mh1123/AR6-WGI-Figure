name: Publish to Zenodo

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:


jobs:
  publish-fig:
    runs-on: ubuntu-latest
    name: Publish code to Zenodo
    steps:
      - name: Checkout the contents of your repository
        uses: actions/checkout@v4

      - name: Create ZIP of code folder
        run: zip -r code.zip code/

      - name: Get or create Zenodo deposition
        id: zenodo_deposition
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          # Ensure the access token is set
          if [ -z "$ZENODO_ACCESS_TOKEN" ]; then
            echo "Error: ZENODO_ACCESS_TOKEN is not set."
            exit 1
          fi

          echo "Token length: ${#ZENODO_ACCESS_TOKEN}"

          # Function to handle API requests
          api_request() {
              local method=$1
              local url=$2
              local data=$3
              local token=$4

              RESPONSE=$(curl -s -X "$method" "$url" \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $token" \
                  --data "$data")

              if [[ $? -ne 0 || -z "$RESPONSE" ]]; then
                  echo "Error: Failed to execute $method request to $url"
                  exit 1
              fi

              echo "$RESPONSE"
          }

          # Fetch existing depositions from Zenodo API
          RESPONSE=$(api_request "GET" "https://sandbox.zenodo.org/api/deposit/depositions" "" "$ZENODO_ACCESS_TOKEN")

          # Extract Concept ID from response
          CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.[0].conceptdoi // empty')
          echo "Extracted Concept ID: ${CONCEPT_ID:-None}"

          if [ -n "$CONCEPT_ID" ]; then
              # Use the existing concept
              echo "Found existing concept with DOI: $CONCEPT_ID"
          else
              # Create a new concept
              echo "No existing concept found. Creating a new concept..."
              CONCEPT_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/concepts" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
              --data '{"metadata": {"title": "New Concept"}}')

              echo "CONCEPT_RESPONSE: $CONCEPT_RESPONSE"
              
              CONCEPT_ID=$(echo "$CONCEPT_RESPONSE" | jq -r '.conceptdoi // empty')

              if [ -z "$CONCEPT_ID" ]; then
                  echo "Error: Failed to retrieve new concept DOI."
                  exit 1
              fi

              echo "Created new concept with DOI: $CONCEPT_ID"
          fi
         

          # Create a new deposition for the concept
          echo "Creating a new deposition for concept DOI: $CONCEPT_ID"
          DEPOSITION_RESPONSE=$(api_request "POST" "https://sandbox.zenodo.org/api/deposit/depositions" "{\"metadata\": {\"conceptdoi\": \"$CONCEPT_ID\"}}" "$ZENODO_ACCESS_TOKEN")

          # Extract Deposition ID
          DEPOSITION_ID=$(echo "$DEPOSITION_RESPONSE" | jq -r '.id // empty')
          if [ -z "$DEPOSITION_ID" ]; then
              echo "Error: Failed to retrieve new Deposition ID."
              exit 1
          fi

          echo "Created new deposition with ID: $DEPOSITION_ID"

          # Set the concept and deposition ID as GitHub environment variables
          echo "CONCEPT_ID=$CONCEPT_ID" >> $GITHUB_ENV
          echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV
      
      - name: Upload the ZIP file to Zenodo
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          if [ ! -f "code.zip" ]; then
            echo "Error: code.zip file does not exist!"
            exit 1
          fi
          curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -F "file=@code.zip;filename=code.zip"
  
      - name: Keep in Draft Mode
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/submit" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
          if [[ $? -ne 0 ]]; then
            echo "Error keeping deposition in draft mode."
            exit 1
          fi
          echo "Submission completed, kept in draft mode (not published)."

      # - name: Publish the Zenodo deposition
      #   if: success()
      #   env:
      #     ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #   run: |
      #     RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/publish" \
      #       -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
      #     if [[ $? -ne 0 ]]; then
      #       echo "Error publishing the deposition."
      #       exit 1
      #     fi
      #     echo "Deposition published successfully."
