name: Publish to Zenodo
on:

  workflow_run:
    workflows: ["Validate Workflow"]
    types:
      - completed

  # # Trigger when you publish a release via GitHub's release page or manually via the Actions tab
  # release:
  #   types:
  #     - published
  # workflow_dispatch:  # Allows manual trigger

jobs:
  publish-fig:
      runs-on: ubuntu-latest
      name: Publish figure to Zenodo
      steps:
        - name: Checkout the contents of your repository
          uses: actions/checkout@v4

        - name: Download validation result
          uses: actions/download-artifact@v4
          with:
            name: validation_passed
            path: ${{ runner.temp }}
  
        - name: Check validation status
          run: |
            if [ ! -f "${{ runner.temp }}/validation_passed.txt" ]; then
              echo "Validation must pass before publishing."
              exit 1
            fi
            echo "Validation passed."

        - name: Create ZIP of code folder
          run: zip -r code.zip code/

        - name: Get or create Zenodo deposition
          id: zenodo_deposition
          env:
            ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
          run: |
            RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/deposit/depositions" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")
            CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.prereserve_doi != null) | .conceptdoi' | head -n 1)
            if [ -z "$CONCEPT_ID" ]; then
              RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
                -d @.zenodo.json)
              DEPOSITION_ID=$(echo $RESPONSE | jq -r '.id')
              echo "Created new deposition with ID: $DEPOSITION_ID"
            else 
              DEPOSITION_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.prereserve_doi != null) | .id' | head -n 1)
              echo "Using existing deposition with ID: $DEPOSITION_ID"
            fi
            echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV

        - name: Upload the ZIP file to Zenodo
          env:
            ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
          run: |
            curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -H "Content-Type: multipart/form-data" \
            -F "file=@code.zip;filename=code.zip"

        - name: Keep in Draft Mode
          env:
            ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
          run: |
            curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/submit" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN"
            echo "Submission completed, kept in draft mode (not published)."

        - name: Publish the Zenodo deposition
          if: success()
          env:
            ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
          run: |
            curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/publish" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN"
            echo "Deposition published successfully."

        # - uses: ipcc-ar7/publish-zenodo@v1.9
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #     ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        #   with:
        #     # Note that Zenodo only accepts root level files.
        #     files: |
        #       *.png
        #       README.md
        #     metadata: figure.yml
        #     sandbox: true
        #     publish: false
        #     concept: ''
        #     verbose: true
