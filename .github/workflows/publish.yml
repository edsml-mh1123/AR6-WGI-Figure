name: Publish to Zenodo

on:
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the 'main' branch
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for Existing Zenodo Concept ID
        id: concept_check
        run: |
          if [[ -f "concept_id.txt" ]]; then
            CONCEPT_ID=$(cat concept_id.txt)
            echo "Found existing Concept ID: $CONCEPT_ID"
            echo "concept_id=$CONCEPT_ID" >> $GITHUB_OUTPUT
          else
            echo "No existing Concept ID found."
            echo "concept_id=" >> $GITHUB_OUTPUT
          fi

      - name: Retrieve or Create Zenodo Concept
        id: zenodo_concept
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          if [[ -n "${{ steps.concept_check.outputs.concept_id }}" ]]; then
            echo "Using existing Concept ID: ${{ steps.concept_check.outputs.concept_id }}"
            exit 0
          fi

          echo "Fetching existing depositions..."
          RESPONSE=$(curl -s -X GET "https://sandbox.zenodo.org/api/deposit/depositions" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")

          if [[ $? -ne 0 || -z "$RESPONSE" ]]; then
            echo "Error: Failed to retrieve depositions from Zenodo."
            exit 1
          fi

          CONCEPT_ID=$(echo "$RESPONSE" | jq -r '[.[] | select(.metadata.prereserve_doi != null) | .conceptdoi] | first')

          if [[ -z "$CONCEPT_ID" || "$CONCEPT_ID" == "null" ]]; then
            echo "No existing concept found. Creating a new one..."
            CREATE_RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions" \
              -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d @.zenodo.json)

            if [[ $? -ne 0 || -z "$CREATE_RESPONSE" ]]; then
              echo "Error: Failed to create a new Zenodo concept."
              exit 1
            fi

            CONCEPT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.conceptdoi')

            if [[ -z "$CONCEPT_ID" || "$CONCEPT_ID" == "null" ]]; then
              echo "Error: Concept DOI not returned. Check API response."
              exit 1
            fi

            echo "New concept created: $CONCEPT_ID"
          else
            echo "Using existing Concept ID: $CONCEPT_ID"
          fi

          echo "$CONCEPT_ID" > concept_id.txt
          echo "concept_id=$CONCEPT_ID" >> $GITHUB_ENV
          echo "concept_id=$CONCEPT_ID" >> $GITHUB_OUTPUT

      - name: Save Concept ID to GitHub Secret
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -f "concept_id.txt" ]]; then
            CONCEPT_ID=$(cat concept_id.txt)
            echo "Storing Concept ID in GitHub Secrets..."
            echo "$CONCEPT_ID" | gh secret set ZENODO_CONCEPT_ID --repo ${{ github.repository }}
          else
            echo "Error: concept_id.txt not found!"
            exit 1
          fi

      - name: Create Draft Zenodo Snapshot
        uses: zenodraft/action@0.13.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        with:
          concept: ${{ steps.concept_check.outputs.concept_id }}
          metadata: .zenodo.json
          publish: false
          sandbox: true
          filenames: code
